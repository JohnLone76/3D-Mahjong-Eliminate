using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestCodeProject
{
    public class TestScript
    {
        /// <summary>
        /// 生成相同数.
        /// </summary>
        public void OnClick1()
        {
            List<int> Pool_List = new List<int>
            {
                1,2,3,4
            };
            List<int> Show_List = new List<int>();

            int sum = 10;
            int pool_list_idx = 0;
            int count = 0;
            while (count < sum)
            {
                Show_List.Add(Pool_List[pool_list_idx]);
                Show_List.Add(Pool_List[pool_list_idx]);

                pool_list_idx++;
                if (pool_list_idx >= Pool_List.Count)
                {
                    pool_list_idx = 0;
                }
                count += 2;
            }

            Console.WriteLine("------------生成相同数------------");
            foreach (var item in Show_List)
            {
                Console.WriteLine(item);
            }
        }

        /// <summary>
        /// 生成相同数2.
        /// </summary>
        public void OnClick2()
        {
            List<int> Pool_List = new List<int>
            {
                12,1,2,3,4,11,22,33,44
            };
            
            // 参数验证
            if (Pool_List == null || Pool_List.Count == 0)
            {
                Console.WriteLine("错误：数字池为空！");
                return;
            }

            List<int> Show_List = new List<int>();
            Dictionary<int, List<int>> Pool_Dic = new Dictionary<int, List<int>>();

            // 初始化字典，将一位数作为key
            foreach (var num in Pool_List.Where(n => n < 10))
            {
                Pool_Dic[num] = new List<int>();
            }

            //排序规则=>{1,11,2,22,12}.
            Pool_List.Sort
            (
                (a, b) =>
                {
                    if (a > 10 && !CheckSameDigits(a))
                    {
                        return 1;
                    }
                    else if (b > 10 && !CheckSameDigits(b))
                    {
                        return -1;
                    }
                    else if (a % 10 == b % 10) //个位数相同.
                    {
                        int key = a % 10;
                        if (!Pool_Dic.ContainsKey(key))
                        {
                            Pool_Dic[key] = new List<int>();
                        }

                        // 将两位数添加到对应个位数的列表中
                        if (a >= 10 && !Pool_Dic[key].Contains(a))
                        {
                            Pool_Dic[key].Add(a);
                        }
                        if (b >= 10 && !Pool_Dic[key].Contains(b))
                        {
                            Pool_Dic[key].Add(b);
                        }

                        //按照个位数比大小.
                        return a.CompareTo(b);
                    }
                    else
                    {
                        //个位数不同的情况，也按照个位数比大小.
                        return (a % 10).CompareTo(b % 10);
                    }
                }
            );

            // 验证字典是否有有效数据
            if (Pool_Dic.Count == 0 || Pool_Dic.All(pair => pair.Value.Count == 0))
            {
                Console.WriteLine("错误：没有找到有效的数字对！");
                return;
            }

            int sum = 10;
            int count = 0;
            var validKeys = Pool_Dic.Where(pair => pair.Value.Count > 0).Select(pair => pair.Key).ToList();
            int keyIndex = 0;

            while (count < sum && validKeys.Count > 0)
            {
                int currentKey = validKeys[keyIndex];
                Show_List.Add(currentKey);
                Show_List.Add(Pool_Dic[currentKey][0]); // 始终取第一个匹配的数

                keyIndex = (keyIndex + 1) % validKeys.Count;
                count += 2;
            }

            Console.WriteLine("------------生成相同数2------------");
            foreach (var item in Show_List)
            {
                Console.WriteLine(item);
            }
        }

        private bool CheckSameDigits(int num)
        {
            int tensD = (num / 10) % 10;
            int onesD = num % 10;
            return tensD == onesD;
        }


        /// <summary>
        /// 生成相同数3.
        /// </summary>
        public void OnClick3()
        {
            List<int> Pool_List = new List<int>
            {
                1,2,3,4,5,6,7,8,9,
                11,22,33,44,55,66,77,88,99,
                12,23,34,45,56,67,78,89
            };
            List<int> Show_List = new List<int>();
            Dictionary<int, List<int>> Pool_Dic = new Dictionary<int, List<int>>();

            // 初始化字典，将一位数作为key
            foreach (var num in Pool_List.Where(n => n < 10))
            {
                Pool_Dic[num] = new List<int>();
            }

            // 将两位数添加到对应的一位数key的value列表中
            foreach (var num in Pool_List.Where(n => n >= 10))
            {
                // 检查是否有相同数字匹配（如1和11）
                int lastDigit = num % 10;
                if (Pool_Dic.ContainsKey(lastDigit) && num / 10 == lastDigit)
                {
                    Pool_Dic[lastDigit].Add(num);
                }

                // 检查是否可以形成连续数
                foreach (var key in Pool_Dic.Keys)
                {
                    string combined = key.ToString() + (num % 100).ToString();
                    if (IsConsecutive(combined) && !Pool_Dic[key].Contains(num))
                    {
                        Pool_Dic[key].Add(num);
                    }

                    combined = (num % 100).ToString() + key.ToString();
                    if (IsConsecutive(combined) && !Pool_Dic[key].Contains(num))
                    {
                        Pool_Dic[key].Add(num);
                    }
                }
            }

            // 生成数字对
            Random random = new Random();
            int sum = 10;
            int count = 0;
            List<int> keys = Pool_Dic.Keys.ToList();
            int keyIndex = 0;

            while (count < sum)
            {
                int currentKey = keys[keyIndex];
                if (Pool_Dic[currentKey].Count > 0)
                {
                    Show_List.Add(currentKey);
                    int randomIndex = random.Next(Pool_Dic[currentKey].Count);
                    Show_List.Add(Pool_Dic[currentKey][randomIndex]);
                    count += 2;
                }

                keyIndex = (keyIndex + 1) % keys.Count;
            }

            Console.WriteLine("------------生成相同数3------------");
            foreach (var item in Show_List)
            {
                Console.WriteLine(item);
            }
        }

        private bool IsConsecutive(string numStr)
        {
            if (numStr.Length < 3) return false;

            for (int i = 1; i < numStr.Length; i++)
            {
                if (int.Parse(numStr[i].ToString()) != int.Parse(numStr[i - 1].ToString()) + 1)
                {
                    return false;
                }
            }
            return true;
        }
    }
}
